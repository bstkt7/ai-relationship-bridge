// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç GigaChat API
const gigachatApiKey = 'NGQzNWJkMTgtMjhmMi00ODQzLTliZWEtZTllYzUwZmQ2MzUwOmYwZWE3NWI4LWM5ZTAtNDM1OC1iOWJjLWNmNGUzYjQwZmFiNA==';

async function testGigaChat() {
  try {
    console.log('üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞...');
    
    const rqUID = crypto.randomUUID();
    const tokenResponse = await fetch('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${gigachatApiKey}`,
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': rqUID,
      },
      body: 'scope=GIGACHAT_API_PERS',
    });

    console.log('üì° –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞:', {
      status: tokenResponse.status,
      statusText: tokenResponse.statusText,
      headers: Object.fromEntries(tokenResponse.headers.entries())
    });

    if (!tokenResponse.ok) {
      const errorText = await tokenResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', errorText);
      return;
    }

    const tokenData = await tokenResponse.json();
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', { 
      hasToken: !!tokenData.access_token,
      expiresIn: tokenData.expires_in 
    });

    if (!tokenData.access_token) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ:', tokenData);
      return;
    }

    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat...');
    
    const chatResponse = await fetch('https://gigachat.devices.sberbank.ru/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        model: 'GigaChat:latest',
        messages: [
          { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.' }
        ],
        max_tokens: 100,
        temperature: 0.7,
      }),
    });

    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç GigaChat:', {
      status: chatResponse.status,
      statusText: chatResponse.statusText,
      headers: Object.fromEntries(chatResponse.headers.entries())
    });

    if (!chatResponse.ok) {
      const errorText = await chatResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat API:', errorText);
      return;
    }

    const chatData = await chatResponse.json();
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GigaChat –ø–æ–ª—É—á–µ–Ω:', {
      hasChoices: !!chatData.choices,
      choicesCount: chatData.choices?.length,
      usage: chatData.usage
    });

    if (chatData.choices && chatData.choices.length > 0) {
      console.log('üí¨ –û—Ç–≤–µ—Ç GigaChat:', chatData.choices[0].message.content);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testGigaChat();
