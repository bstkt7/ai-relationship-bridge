import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
function generateRqUID(): string {
  return crypto.randomUUID();
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π (–±–∞–∑–æ–≤–∞—è)
function analyzeEmotion(text: string): string {
  const lowerText = text.toLowerCase();
  
  if (lowerText.includes('–∑–ª–æ–π') || lowerText.includes('–¥–æ—Å—Ç–∞–ª') || lowerText.includes('—É–ø—Ä–µ–∫')) {
    return '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ';
  } else if (lowerText.includes('–≥—Ä—É—Å—Ç–Ω') || lowerText.includes('–ø–µ—á–∞–ª')) {
    return '–≥—Ä—É—Å—Ç—å';
  } else if (lowerText.includes('—Ä–∞–¥–æ—Å—Ç') || lowerText.includes('—Å—á–∞—Å—Ç–ª–∏–≤')) {
    return '—Ä–∞–¥–æ—Å—Ç—å';
  } else if (lowerText.includes('—Å—Ç—Ä–∞—Ö') || lowerText.includes('–±–æ—é—Å—å')) {
    return '—Å—Ç—Ä–∞—Ö';
  }
  
  return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ';
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ AI Mediator function called');
    
    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á GigaChat
    const gigachatApiKey = Deno.env.get('GIGACHAT_API_KEY');
    console.log('üîë GigaChat API key available:', !!gigachatApiKey);
    
    if (!gigachatApiKey) {
      console.error('‚ùå GIGACHAT_API_KEY not found in environment variables');
      return new Response(
        JSON.stringify({ 
          error: 'GIGACHAT_API_KEY not configured',
          recommendation: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò-–º–µ–¥–∏–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.' 
        }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    const { partner1_message, partner2_message } = await req.json();
    console.log('üì® Messages received:', { partner1_message, partner2_message });

    if (!partner1_message || !partner2_message) {
      return new Response(
        JSON.stringify({ 
          error: 'Both partner messages are required',
          recommendation: '–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.' 
        }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç GigaChat
    console.log('üîê Requesting token from GigaChat...');
    const rqUID = generateRqUID();
    
    const tokenResponse = await fetch('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${gigachatApiKey}`,
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': rqUID,
      },
      body: 'scope=GIGACHAT_API_PERS',
    });

    if (!tokenResponse.ok) {
      console.error('‚ùå Token request failed:', tokenResponse.status, await tokenResponse.text());
      return new Response(
        JSON.stringify({ 
          error: 'Failed to get GigaChat token',
          recommendation: '–ò–ò-–º–µ–¥–∏–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤—ã—Å–ª—É—à–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å.' 
        }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const tokenData = await tokenResponse.json();
    console.log('‚úÖ Token data received:', { hasToken: !!tokenData.access_token });

    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat API
    console.log('ü§ñ Sending chat request to GigaChat...');
    
    const chatResponse = await fetch('https://gigachat.devices.sberbank.ru/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        model: 'GigaChat:latest',
        messages: [
          {
            role: 'system',
            content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –º–µ–¥–∏–∞—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –ø–∞—Ä–µ —Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω. 

–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–º
- –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
- –ü–æ–º–æ–≥–∏ –ø–æ–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (–º–∞–∫—Å–∏–º—É–º 150 —Å–ª–æ–≤)
- –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π –Ω–∏—á—å—é —Å—Ç–æ—Ä–æ–Ω—É, –±—É–¥—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º –º–µ–¥–∏–∞—Ç–æ—Ä–æ–º`
          },
          {
            role: 'user',
            content: `–ü–∞—Ä—Ç–Ω–µ—Ä 1 –≥–æ–≤–æ—Ä–∏—Ç: "${partner1_message}"

–ü–∞—Ä—Ç–Ω–µ—Ä 2 –æ—Ç–≤–µ—á–∞–µ—Ç: "${partner2_message}"

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞–π —Å–æ–≤–µ—Ç, –∫–∞–∫ –ª—É—á—à–µ —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç.`
          }
        ],
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!chatResponse.ok) {
      console.error('‚ùå Chat request failed:', chatResponse.status, await chatResponse.text());
      return new Response(
        JSON.stringify({ 
          error: 'Failed to get GigaChat response',
          recommendation: '–ò–ò-–º–µ–¥–∏–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–∫—Ä—ã—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –æ –≤–∞—à–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö.' 
        }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const chatData = await chatResponse.json();
    console.log('‚úÖ Chat data received:', { hasChoices: !!chatData.choices });

    const recommendation = chatData.choices?.[0]?.message?.content || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã—Å–ª—É—à–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å.';
    console.log('üí° Recommendation received:', recommendation);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
    const partner1Emotion = analyzeEmotion(partner1_message);
    const partner2Emotion = analyzeEmotion(partner2_message);

    const emotionAnalysis = {
      partner1_emotion: partner1Emotion,
      partner2_emotion: partner2Emotion,
      overall_tone: partner1Emotion === '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ' || partner2Emotion === '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ' ? '–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π' : '—Å–ø–æ–∫–æ–π–Ω—ã–π'
    };

    return new Response(
      JSON.stringify({
        recommendation,
        emotion_analysis: emotionAnalysis,
        success: true
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('‚ùå Critical error:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        recommendation: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –≤—ã—Å–ª—É—à–∞–≤ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.' 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});