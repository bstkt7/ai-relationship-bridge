// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å GigaChat
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

async function debugGigaChat() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É GigaChat...');
  
  const gigachatApiKey = 'NGQzNWJkMTgtMjhmMi00ODQzLTliZWEtZTllYzUwZmQ2MzUwOmYwZWE3NWI4LWM5ZTAtNDM1OC1iOWJjLWNmNGUzYjQwZmFiNA==';
  
  try {
    // –®–∞–≥ 1: –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    console.log('üîê –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
    const rqUID = crypto.randomUUID();
    
    const tokenResponse = await fetch('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${gigachatApiKey}`,
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': rqUID,
      },
      body: 'scope=GIGACHAT_API_PERS',
    });

    console.log('üì° –û—Ç–≤–µ—Ç –Ω–∞ —Ç–æ–∫–µ–Ω:', {
      status: tokenResponse.status,
      statusText: tokenResponse.statusText,
      ok: tokenResponse.ok
    });

    if (!tokenResponse.ok) {
      const errorText = await tokenResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', errorText);
      return { success: false, step: 'token', error: errorText };
    }

    const tokenData = await tokenResponse.json();
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', {
      hasToken: !!tokenData.access_token,
      expiresIn: tokenData.expires_in
    });

    // –®–∞–≥ 2: –¢–µ—Å—Ç GigaChat API
    console.log('ü§ñ –®–∞–≥ 2: –¢–µ—Å—Ç GigaChat API...');
    
    const chatResponse = await fetch('https://gigachat.devices.sberbank.ru/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        model: 'GigaChat:latest',
        messages: [
          { 
            role: 'system', 
            content: '–¢—ã —Å–µ–º–µ–π–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.' 
          },
          { 
            role: 'user', 
            content: '–ü–∞—Ä—Ç–Ω–µ—Ä 1 –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —É—Å—Ç–∞–ª –æ—Ç —Ä–∞–±–æ—Ç—ã". –ü–∞—Ä—Ç–Ω–µ—Ä 2 –≥–æ–≤–æ—Ä–∏—Ç: "–¢—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–º–∞". –î–∞–π —Å–æ–≤–µ—Ç.' 
          }
        ],
        max_tokens: 200,
        temperature: 0.7,
      }),
    });

    console.log('üì° –û—Ç–≤–µ—Ç GigaChat API:', {
      status: chatResponse.status,
      statusText: chatResponse.statusText,
      ok: chatResponse.ok
    });

    if (!chatResponse.ok) {
      const errorText = await chatResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat API:', errorText);
      return { success: false, step: 'api', error: errorText };
    }

    const chatData = await chatResponse.json();
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
      hasChoices: !!chatData.choices,
      choicesCount: chatData.choices?.length,
      recommendation: chatData.choices?.[0]?.message?.content
    });

    // –®–∞–≥ 3: –¢–µ—Å—Ç Edge Function
    console.log('‚ö° –®–∞–≥ 3: –¢–µ—Å—Ç Edge Function...');
    
    const edgeFunctionResponse = await fetch(`${window.location.origin}/functions/v1/ai-mediator`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('supabase.auth.token')?.split('.')[1] || 'anon-key'}`
      },
      body: JSON.stringify({
        partner1_message: '–Ø —É—Å—Ç–∞–ª –æ—Ç —Ä–∞–±–æ—Ç—ã',
        partner2_message: '–¢—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–º–∞'
      })
    });

    console.log('üì° Edge Function –æ—Ç–≤–µ—Ç:', {
      status: edgeFunctionResponse.status,
      statusText: edgeFunctionResponse.statusText,
      ok: edgeFunctionResponse.ok
    });

    if (edgeFunctionResponse.ok) {
      const edgeData = await edgeFunctionResponse.json();
      console.log('‚úÖ Edge Function —Ä–∞–±–æ—Ç–∞–µ—Ç:', edgeData);
      return { success: true, recommendation: edgeData.recommendation };
    } else {
      const errorText = await edgeFunctionResponse.text();
      console.error('‚ùå Edge Function –æ—à–∏–±–∫–∞:', errorText);
      return { success: false, step: 'edge-function', error: errorText };
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return { success: false, step: 'general', error: error.message };
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ GigaChat...');
debugGigaChat().then(result => {
  console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', result);
  
  if (result.success) {
    console.log('‚úÖ GigaChat —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  } else {
    console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —ç—Ç–∞–ø–µ: ${result.step}`);
    console.log(`üí° –û—à–∏–±–∫–∞: ${result.error}`);
  }
});