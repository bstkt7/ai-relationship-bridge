import { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Shield, CheckCircle, XCircle, AlertCircle } from 'lucide-react';

const AdminTest = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [testResults, setTestResults] = useState<any>(null);

  useEffect(() => {
    if (!user) {
      navigate('/auth');
    }
  }, [user, navigate]);

  const testAdminAccess = async () => {
    setIsLoading(true);
    setTestResults(null);

    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userTest = {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        status: user ? 'success' : 'error',
        message: user ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      };

      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
      const adminTest = {
        name: '–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ',
        status: 'success',
        message: '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)'
      };

      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ GigaChat API
      let gigachatTest = {
        name: 'GigaChat API',
        status: 'pending',
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...'
      };

      try {
        const response = await fetch('/api/v1/ai-mediator', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            partner1_message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 1',
            partner2_message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 2'
          })
        });

        if (response.ok) {
          const data = await response.json();
          gigachatTest = {
            name: 'GigaChat API',
            status: 'success',
            message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
          };
        } else {
          gigachatTest = {
            name: 'GigaChat API',
            status: 'error',
            message: `–û—à–∏–±–∫–∞: ${response.status}`
          };
        }
      } catch (error) {
        gigachatTest = {
          name: 'GigaChat API',
          status: 'error',
          message: `–û—à–∏–±–∫–∞: ${error.message}`
        };
      }

      setTestResults([userTest, adminTest, gigachatTest]);

    } catch (error) {
      console.error('Test error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const goToAdmin = () => {
    navigate('/admin');
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-sky-50 to-lavender-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto"></div>
          <p className="mt-4 text-muted-foreground">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-50 to-lavender-50">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-4">üõ°Ô∏è –¢–µ—Å—Ç –∞–¥–º–∏–Ω–∫–∏ BridgeAI</h1>
          <p className="text-muted-foreground">–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
        </div>

        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <p><strong>Email:</strong> {user.email}</p>
              <p><strong>ID:</strong> {user.id}</p>
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</p>
            </div>
          </CardContent>
        </Card>

        <Card className="mb-6">
          <CardHeader>
            <CardTitle>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</CardTitle>
            <CardDescription>
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∫–∏
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <Button 
                onClick={testAdminAccess} 
                disabled={isLoading}
                className="w-full"
              >
                {isLoading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'}
              </Button>

              {testResults && (
                <div className="space-y-3">
                  {testResults.map((test: any, index: number) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center gap-3">
                        {test.status === 'success' && <CheckCircle className="h-5 w-5 text-green-600" />}
                        {test.status === 'error' && <XCircle className="h-5 w-5 text-red-600" />}
                        {test.status === 'pending' && <AlertCircle className="h-5 w-5 text-yellow-600" />}
                        <div>
                          <p className="font-medium">{test.name}</p>
                          <p className="text-sm text-muted-foreground">{test.message}</p>
                        </div>
                      </div>
                      <div className={`px-2 py-1 rounded text-xs ${
                        test.status === 'success' ? 'bg-green-100 text-green-800' :
                        test.status === 'error' ? 'bg-red-100 text-red-800' :
                        'bg-yellow-100 text-yellow-800'
                      }`}>
                        {test.status === 'success' ? '‚úÖ' : test.status === 'error' ? '‚ùå' : '‚è≥'}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–î–µ–π—Å—Ç–≤–∏—è</CardTitle>
            <CardDescription>
              –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–¥–º–∏–Ω–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∞–º
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4">
              <Button onClick={goToAdmin} className="flex-1">
                <Shield className="h-4 w-4 mr-2" />
                –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É
              </Button>
              <Button 
                variant="outline" 
                onClick={() => navigate('/dashboard')}
                className="flex-1"
              >
                –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–∞—à–±–æ—Ä–¥
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default AdminTest;
