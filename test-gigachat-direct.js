// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç GigaChat API
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API

async function testGigaChatDirect() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º–æ–π —Ç–µ—Å—Ç GigaChat API...');
  
  const gigachatApiKey = 'NGQzNWJkMTgtMjhmMi00ODQzLTliZWEtZTllYzUwZmQ2MzUwOmYwZWE3NWI4LWM5ZTAtNDM1OC1iOWJjLWNmNGUzYjQwZmFiNA==';
  
  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    console.log('üîê –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
    const rqUID = crypto.randomUUID();
    
    const tokenResponse = await fetch('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${gigachatApiKey}`,
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': rqUID,
      },
      body: 'scope=GIGACHAT_API_PERS',
    });

    console.log('üì° –û—Ç–≤–µ—Ç –Ω–∞ —Ç–æ–∫–µ–Ω:', {
      status: tokenResponse.status,
      statusText: tokenResponse.statusText,
      ok: tokenResponse.ok,
      headers: Object.fromEntries(tokenResponse.headers.entries())
    });

    if (!tokenResponse.ok) {
      const errorText = await tokenResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', errorText);
      return { success: false, step: 'token', error: errorText };
    }

    const tokenData = await tokenResponse.json();
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', {
      hasToken: !!tokenData.access_token,
      expiresIn: tokenData.expires_in,
      tokenType: tokenData.token_type
    });

    // –®–∞–≥ 2: –¢–µ—Å—Ç GigaChat API
    console.log('ü§ñ –®–∞–≥ 2: –¢–µ—Å—Ç GigaChat API...');
    
    const chatResponse = await fetch('https://gigachat.devices.sberbank.ru/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        model: 'GigaChat:latest',
        messages: [
          { 
            role: 'system', 
            content: '–¢—ã —Å–µ–º–µ–π–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.' 
          },
          { 
            role: 'user', 
            content: '–ü–∞—Ä—Ç–Ω–µ—Ä 1 –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —É—Å—Ç–∞–ª –æ—Ç —Ä–∞–±–æ—Ç—ã". –ü–∞—Ä—Ç–Ω–µ—Ä 2 –≥–æ–≤–æ—Ä–∏—Ç: "–¢—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–º–∞". –î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.' 
          }
        ],
        max_tokens: 300,
        temperature: 0.7,
      }),
    });

    console.log('üì° –û—Ç–≤–µ—Ç GigaChat API:', {
      status: chatResponse.status,
      statusText: chatResponse.statusText,
      ok: chatResponse.ok,
      headers: Object.fromEntries(chatResponse.headers.entries())
    });

    if (!chatResponse.ok) {
      const errorText = await chatResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat API:', errorText);
      return { success: false, step: 'api', error: errorText };
    }

    const chatData = await chatResponse.json();
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
      hasChoices: !!chatData.choices,
      choicesCount: chatData.choices?.length,
      recommendation: chatData.choices?.[0]?.message?.content,
      usage: chatData.usage
    });

    // –®–∞–≥ 3: –¢–µ—Å—Ç Edge Function
    console.log('‚ö° –®–∞–≥ 3: –¢–µ—Å—Ç Supabase Edge Function...');
    
    const edgeFunctionResponse = await fetch('https://fhtvxziachtotvtjxsgp.supabase.co/functions/v1/ai-mediator', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZodHZ4emlhY2h0b3R2dGp4c2dwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0OTgwNDgsImV4cCI6MjA3MzA3NDA0OH0.o0BfPTD6a97EHPebkWSLZCIiCJNRVrWpYzvT3cowbSM`
      },
      body: JSON.stringify({
        partner1_message: '–Ø —É—Å—Ç–∞–ª –æ—Ç —Ä–∞–±–æ—Ç—ã',
        partner2_message: '–¢—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–º–∞'
      })
    });

    console.log('üì° Edge Function –æ—Ç–≤–µ—Ç:', {
      status: edgeFunctionResponse.status,
      statusText: edgeFunctionResponse.statusText,
      ok: edgeFunctionResponse.ok,
      headers: Object.fromEntries(edgeFunctionResponse.headers.entries())
    });

    if (edgeFunctionResponse.ok) {
      const edgeData = await edgeFunctionResponse.json();
      console.log('‚úÖ Edge Function —Ä–∞–±–æ—Ç–∞–µ—Ç:', edgeData);
      return { 
        success: true, 
        recommendation: edgeData.recommendation,
        emotion_analysis: edgeData.emotion_analysis 
      };
    } else {
      const errorText = await edgeFunctionResponse.text();
      console.error('‚ùå Edge Function –æ—à–∏–±–∫–∞:', errorText);
      return { success: false, step: 'edge-function', error: errorText };
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return { success: false, step: 'general', error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ GigaChat API –∫–ª—é—á–∞
async function checkApiKeyStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞...');
  
  try {
    const response = await fetch('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer NGQzNWJkMTgtMjhmMi00ODQzLTliZWEtZTllYzUwZmQ2MzUwOmYwZWE3NWI4LWM5ZTAtNDM1OC1iOWJjLWNmNGUzYjQwZmFiNA==`,
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': crypto.randomUUID(),
      },
      body: 'scope=GIGACHAT_API_PERS',
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
      return true;
    } else {
      const error = await response.text();
      console.error('‚ùå API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', response.status, error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
console.log('üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ GigaChat...');

// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
checkApiKeyStatus().then(keyValid => {
  if (keyValid) {
    console.log('‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç...');
    return testGigaChatDirect();
  } else {
    console.log('‚ùå API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return { success: false, error: 'Invalid API key' };
  }
}).then(result => {
  console.log('üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', result);
  
  if (result.success) {
    console.log('üéâ GigaChat API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:', result.recommendation);
  } else {
    console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —ç—Ç–∞–ø–µ: ${result.step}`);
    console.log(`üí° –û—à–∏–±–∫–∞: ${result.error}`);
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    if (result.step === 'token') {
      console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á –Ω–µ –∏—Å—Ç–µ–∫');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    } else if (result.step === 'api') {
      console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API');
      console.log('- –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ GigaChat');
    } else if (result.step === 'edge-function') {
      console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Edge Function');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GIGACHAT_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Supabase');
    }
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.testGigaChatDirect = testGigaChatDirect;
window.checkApiKeyStatus = checkApiKeyStatus;